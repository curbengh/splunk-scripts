[Disk Monitor]
action.email = 1
action.email.inline = 1
action.email.sendresults = 1
action.email.subject = $name$: $result.Host$ ($result.Disk$) has reached 99%
action.email.to = example@example.com
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = Host, Disk
alert.suppress.period = 1d
counttype = number of events
cron_schedule = */15 * * * *
description = Monitor for disk drives with less than 1% of free space.
disabled = 0
dispatch.earliest_time = -15m
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = | mstats fillnull_value="null" avg(_value) AS avgValue WHERE index IN ("windows-metrics", "linux-metrics") metric_name IN ("LogicalDisk.%_Free_Space", "df_metric.Use") BY host, metric_name, instance, Filesystem span=1s\
| eval disk_util=if(metric_name=="LogicalDisk.%_Free_Space", 100-avgValue, avgValue), Disk=if(instance!="null", instance, Filesystem), Host=host\
| where disk_util >= 99\
| stats max(disk_util) AS max_disk_util BY Host, Disk\
| eval "Disk Space Utilisation %"=round(max_disk_util, 2)\
| table Host, Disk, "Disk Space Utilisation %"

[Heavy Forwarder Status Monitor]
action.email = 1
action.email.inline = 1
action.email.sendresults = 1
action.email.subject = $name$: $result.Host$ is down
action.email.to = example@example.com
alert.digest_mode = 0
counttype = number of events
cron_schedule = */15 * * * *
description = heavy_fwd is either down or unable to forward logs to Splunk Cloud for more than 15 minutes.
disabled = 0
dispatch.earliest_time = -15m
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = | tstats summariesonly=true allow_old_summaries=true count FROM datamodel=Splunk_Internal.Server WHERE index=_internal nodename=Server.Metrics.Tcpin_Connections host=heavy_fwd\
| where count==0

# Requires custom data model
# see internal_server.json
[Splunk License Monitoring]
action.email = 1
action.email.inline = 1
action.email.sendresults = 1
action.email.to = example@example.com
alert.digest_mode = 1
counttype = number of events
cron_schedule = 10 0 * * *
description = Alert when Splunk is ingesting more than 90% of license. License rollover at 00:00 UTC (Cloud) or timezone of the license master (Enterprise). Pay attention to the timezones of the app owner and the license master. Adjust `cron_schedule` and also `earliest_time` to account for daylight saving.
disabled = 0
dispatch.earliest_time = -15m
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = | tstats summariesonly=true allow_old_summaries=true sum(Server.Licenser.Daily_Usage.gb) AS GB FROM datamodel=Splunk_Internal.Server WHERE index=_internal nodename=Server.Licenser.Daily_Usage BY host\
| join host type=inner\
  ```ingest entitlement is updated every 6 hours```\
  [| tstats summariesonly=true allow_old_summaries=true latest(Server.Licenser.Entitlements.ingest_license) AS Licensed FROM datamodel=Splunk_Internal.Server WHERE earliest=-7h index=summary nodename=Server.Licenser.Entitlements BY host]\
| addinfo\
| eval percent=round(GB/Licensed*100, 1), GB=round(GB,1), offset=ltrim(strftime(info_min_time,"%:z"),"+"), "Time Range"=strftime(info_min_time-86400,"%d/%m/%Y")." ".offset." - ".strftime(info_min_time,"%d/%m/%Y")." ".offset\
| table "Time Range", GB, Licensed, percent\
| where percent>=90

[Splunk Scheduled Searches Skipped]
action.email = 1
action.email.inline = 1
action.email.sendresults = 1
action.email.to = example@example.com
alert.digest_mode = 0
counttype = number of events
cron_schedule = */15 * * * *
description = Monitor for scheduled searches
disabled = 0
dispatch.earliest_time = -15m
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = index=_internal sourcetype=scheduler app=mycompany* savedsearch_name=* status=skipped\
| eval Time=strftime(_time,"%Y-%m-%d %H:%M:%S %z"), savedsearch_type=if(window_time=-1, "Alert", "Report")\
| table Time, app, savedsearch_name, savedsearch_type, reason

[Windows Splunk Forwarder Monitoring]
action.email = 1
action.email.inline = 1
action.email.sendresults = 1
action.email.to = example@example.com
alert.digest_mode = 0
counttype = number of events
cron_schedule = */15 * * * *
description = Monitor the windows splunk forwarder service and alerts if it is down
disabled = 0
dispatch.earliest_time = -15m
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = | tstats summariesonly=true allow_old_summaries=true count FROM datamodel=Endpoint.Processes WHERE index="windows" Processes.signature_id=4689 Processes.process_name="splunkd.exe" BY index, host, Processes.signature_id, Processes.signature, Processes.process, Processes.user, _time span=1s\
| rename Processes.* AS *, signature_id AS EventCode, signature AS EventDescription\
| eval Time = strftime(_time, "%Y-%m-%d %H:%M:%S %z")\
| lookup ad_users sAMAccountName AS user OUTPUT displayName AS Name, mail AS Email\
| table Time, index, host, EventCode, EventDescription, process, user, Name, Email
